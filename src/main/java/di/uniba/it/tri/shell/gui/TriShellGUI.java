/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package di.uniba.it.tri.shell.gui;

import di.uniba.it.tri.api.Tri;
import di.uniba.it.tri.ir.SearchResult;
import di.uniba.it.tri.ir.Searcher;
import di.uniba.it.tri.shell.gui.data.Options;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.apache.lucene.queryparser.classic.ParseException;

/**
 *
 * @author pierpaolo
 */
public class TriShellGUI extends javax.swing.JFrame {

    /**
     * Creates new form TriShellGUI
     */
    public TriShellGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainTabbedPanel = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfQuery = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        topnSpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        tablePrev = new javax.swing.JButton();
        tableNext = new javax.swing.JButton();
        triPanel = new javax.swing.JPanel();
        triToolbar = new javax.swing.JToolBar();
        getb = new javax.swing.JButton();
        mainMenubar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemClose = new javax.swing.JMenuItem();
        menuClose = new javax.swing.JMenu();
        menuitemOptions = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Temporal RI - (GUI ver. 0.10b)");
        setPreferredSize(new java.awt.Dimension(800, 600));

        mainTabbedPanel.setPreferredSize(new java.awt.Dimension(640, 480));

        searchPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Query");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        searchPanel.add(jLabel1, gridBagConstraints);

        tfQuery.setColumns(25);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        searchPanel.add(tfQuery, gridBagConstraints);

        searchButton.setText("Search...");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        searchPanel.add(searchButton, gridBagConstraints);

        topnSpinner.setModel(new javax.swing.SpinnerNumberModel(25, 1, 1000, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        searchPanel.add(topnSpinner, gridBagConstraints);

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Content", "Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        searchPanel.add(jScrollPane1, gridBagConstraints);

        tablePrev.setText("<-");
        tablePrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablePrevActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        searchPanel.add(tablePrev, gridBagConstraints);

        tableNext.setText("->");
        tableNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableNextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        searchPanel.add(tableNext, gridBagConstraints);

        mainTabbedPanel.addTab("Search", searchPanel);

        triPanel.setLayout(new java.awt.BorderLayout());

        triToolbar.setRollover(true);

        getb.setText("Get");
        getb.setFocusable(false);
        getb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getb.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getbActionPerformed(evt);
            }
        });
        triToolbar.add(getb);

        triPanel.add(triToolbar, java.awt.BorderLayout.NORTH);

        mainTabbedPanel.addTab("Temporal RI", triPanel);

        getContentPane().add(mainTabbedPanel, java.awt.BorderLayout.CENTER);

        menuFile.setText("File");

        menuItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuItemClose.setText("Close");
        menuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCloseActionPerformed(evt);
            }
        });
        menuFile.add(menuItemClose);

        mainMenubar.add(menuFile);

        menuClose.setText("Edit");

        menuitemOptions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuitemOptions.setText("Options...");
        menuitemOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemOptionsActionPerformed(evt);
            }
        });
        menuClose.add(menuitemOptions);

        mainMenubar.add(menuClose);

        setJMenuBar(mainMenubar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuitemOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemOptionsActionPerformed
        try {
            optionsDialog.setVisible(true);
            Options options = optionsDialog.getOptions();
            if (options != null) {
                File newIndexFile = new File(options.getIndex());
                if (!newIndexFile.equals(indexDir)) {
                    indexDir = newIndexFile;
                    searcher = new Searcher(indexDir);
                }
                if (!options.getTriFolder().equals(triFolder)) {
                    triApi.close();
                    triApi.setMaindir(options.getTriFolder());
                    yearListmodel.removeAllElements();
                    List<String> years = triApi.year(0, Integer.MAX_VALUE);
                    Collections.sort(years);
                    for (String year : years) {
                        yearListmodel.addElement(year);
                        triApi.load("file", year, year);
                    }
                    getDialog.getYearComboBox().setModel(yearListmodel);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error to set new options\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuitemOptionsActionPerformed

    private void menuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_menuItemCloseActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if (searcher == null) {
            JOptionPane.showMessageDialog(this, "You need to load a search engine. See options.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            String queryText = tfQuery.getText();
            if (queryText != null && queryText.length() > 0) {
                try {
                    results = searcher.search(queryText, ((Integer) topnSpinner.getModel().getValue()));
                    refreshTable();
                } catch (ParseException | IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error to search\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void tablePrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablePrevActionPerformed
        if (results != null) {
            if (offset - 10 >= 0) {
                offset -= 10;
                refreshTable();
            }
        }
    }//GEN-LAST:event_tablePrevActionPerformed

    private void tableNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableNextActionPerformed
        if (results != null) {
            if (offset + 10 < results.size()) {
                offset += 10;
                refreshTable();
            }
        }
    }//GEN-LAST:event_tableNextActionPerformed

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        if (evt.getClickCount() == 2) {
            int row = resultsTable.getSelectedRow();
            if (row >= 0) {
                JOptionPane.showInputDialog(this, resultsTable.getModel().getValueAt(row, 1), resultsTable.getModel().getValueAt(row, 0).toString(), JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_resultsTableMouseClicked

    private void getbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getbActionPerformed
        // TODO add your handling code here:
        getDialog.setVisible(true);
        if (getDialog.getWord() != null && getDialog.getYear() != null) {
            try {
                triApi.get(getDialog.getYear(), getDialog.getWord() + "_" + getDialog.getYear(), getDialog.getWord());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error to get vector\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_getbActionPerformed

    private void refreshTable() {
        if (results != null) {
            int limit = Math.min(results.size(), offset + 10);
            int k = 0;
            for (int i = offset; i < limit; i++) {
                resultsTable.getModel().setValueAt(results.get(i).getId(), k, 0);
                resultsTable.getModel().setValueAt(results.get(i).getText(), k, 1);
                resultsTable.getModel().setValueAt(results.get(i).getScore(), k, 2);
                k++;
            }
            for (int i = k; i < 10; i++) {
                resultsTable.getModel().setValueAt(null, k, 0);
                resultsTable.getModel().setValueAt(null, k, 1);
                resultsTable.getModel().setValueAt(null, k, 2);
                k++;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TriShellGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TriShellGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TriShellGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TriShellGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TriShellGUI().setVisible(true);
            }
        });
    }

    private GetDialog getDialog = new GetDialog(this, true);

    private DefaultComboBoxModel<String> yearListmodel = new DefaultComboBoxModel<>();

    private int offset = 0;

    private List<SearchResult> results = null;

    private Searcher searcher = null;

    private File indexDir = null;

    private Tri triApi = new Tri();

    private String triFolder = null;

    private OptionsDialog optionsDialog = new OptionsDialog(this, true);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar mainMenubar;
    private javax.swing.JTabbedPane mainTabbedPanel;
    private javax.swing.JMenu menuClose;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemClose;
    private javax.swing.JMenuItem menuitemOptions;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton tableNext;
    private javax.swing.JButton tablePrev;
    private javax.swing.JTextField tfQuery;
    private javax.swing.JSpinner topnSpinner;
    private javax.swing.JPanel triPanel;
    private javax.swing.JToolBar triToolbar;
    // End of variables declaration//GEN-END:variables

}
